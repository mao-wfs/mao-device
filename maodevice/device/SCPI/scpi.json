{
  "*AAD": {
    "verbose_cmd": "accept_address",
    "type": "command",
    "args": null,
    "doc": "*AAD: Accept Address Command\n\n        This command, in conjunction with the Address Set protocol,\n        allows the controller to detect all address-configurable devices\n        (that is, devices that implement this command) and assign an\n        IEEE 488.1 address to each of those devices.\n        An address-configurable device is detected when the controller\n        has completed a byte-by-byte search of the device's identifier,\n        after which time the address is assigned. The Address Set\n        protocol causes this identifier search to be executed repeatedly\n        until all address-configurable devices have been detected.\n\n        Return:\n            None\n        "
  },
  "*CAL?": {
    "verbose_cmd": "calibration_query",
    "type": "query",
    "args": null,
    "doc": "*CAL?: Calibration Query\n\n        The Calibration query causes a device to perform an internal\n        self-calibration and generate a response that indicates whether\n        or not the device completed the self-calibration without error.\n\n        Return:\n            ret (bytes): Exit status (No-error: 1)\n        "
  },
  "*CLS": {
    "verbose_cmd": "clear_status",
    "type": "command",
    "args": null,
    "doc": "*CLS: Clear Status Command\n\n        The Clear Status command clears status data structures, and\n        forces the device to the Operation Complete Command Idle State\n        and the Operation Complete Query Idle State.\n\n        Return:\n            None\n        "
  },
  "*DDT": {
    "verbose_cmd": "define_device_trigger",
    "type": "command",
    "args": null,
    "doc": "*DDT: Define Device Trigger Command\n\n        The Define Device Trigger command stores a command sequence that\n        is executed when a group execute trigger (GET), IEEE 488.1\n        interface message, or *TRG common command is received. The *RST\n        common command shall set the command sequence to a\n        device-defined state.\n\n        Return:\n            None\n        "
  },
  "*DDT?": {
    "verbose_cmd": "define_device_trigger_query",
    "type": "query",
    "args": null,
    "doc": "*DDT?: Define Device Trigger Query\n\n        The Define Device Trigger query allows the programmer to examine\n        the command sequence which will be executed when a GET or *TRG\n        command is received.\n\n        Return:\n            ret (bytes): The query response.\n        "
  },
  "*DLF": {
    "verbose_cmd": "disable_listener_function",
    "type": "command",
    "args": null,
    "doc": "*DLF: Disable Listener Function\n\n        The Disable Listener Function command causes a device to cease\n        being a listener (change to L0 subset). If this command is the\n        first device-specific message received after the device leaves\n        IEEE 488.1 DCAS state, the device shall cease being a listener\n        within 100 ms after the acceptance of the\n        <PROGRAM MESSAGE TERMINATOR>. A subsequent DCL message shall\n        restore listener capability. The device shall resume listening\n        within 100 ms after entering IEEE 488.1 DCAS state.\n\n        Return:\n            None\n        "
  },
  "*DMC": {
    "verbose_cmd": "define_macro",
    "type": "command",
    "args": null,
    "doc": "*DMC: Define Macro Command\n\n        The Define Macro command allows the programmer to assign a\n        sequence of zero or more <PROGRAM MESSAGE UNIT> elements to a\n        macro label. The sequence is executed when the label is\n        received as a <COMMAND PROGRAM HEADER> or\n        <QUERY PROGRAM HEADER>.\n\n        Return:\n            None\n        "
  },
  "*EMC": {
    "verbose_cmd": "enable_macro",
    "type": "command",
    "args": null,
    "doc": "*EMC: Enable Macro Command\n\n        The Enable Macro command enables and disables expansion of\n        macros. Macro definitions are not affected by this command.\n        One use of this command is to turn off macro expansion in order\n        to execute a device-specific command with the same name as a\n        macro. The *RST command disables the expansion of macros.\n\n        Return:\n            None\n        "
  },
  "*EMC?": {
    "verbose_cmd": "enable_macro_query",
    "type": "query",
    "args": null,
    "doc": "*EMC?: Enable Macro Query\n\n        The Enable Macro query allows the programmer to query whether\n        the macros are enabled. A returned value of zero indicates that\n        macros are disabled. A returned value of one indicates that\n        macros are enabled.\n\n        Return:\n            ret (bytes): The query response.\n        "
  },
  "*ESE": {
    "verbose_cmd": "standard_event_status_enable",
    "type": "command",
    "args": null,
    "doc": "*ESE: Standard Event Status Enable Command\n\n        The Standard Event Status Enable command sets the Standard Event\n        Status Enable Register bits.\n\n        Return:\n            None\n        "
  },
  "*ESE?": {
    "verbose_cmd": "standard_event_status_enable_query",
    "type": "query",
    "args": null,
    "doc": "*ESE?: Standard Event Status Enable Query\n\n        The Standard Event Status Enable query allows the programmer to\n        determine the current contents of the Standard Event Status\n        Enable Register.\n\n        Return:\n            ret (bytes): The query response.\n        "
  },
  "*ESR?": {
    "verbose_cmd": "standard_event_status_register_query",
    "type": "query",
    "args": null,
    "doc": "*ESR?: Standard Event Status Register Query\n\n        The Standard Event Status Register query allows the programmer\n        to determine the current contents of the Standard Event Status\n        Register. Reading the Standard Event Status Register clears it.\n\n        Return:\n            ret (bytes): The query response.\n        "
  },
  "*GMC?": {
    "verbose_cmd": "get_macro_contents_query",
    "type": "query",
    "args": null,
    "doc": "*GMC?: Get Macro Contents Query\n\n        The Get Macro Contents query allows the current definition of a\n        macro to be retrieved from a device.\n\n        Return:\n            ret (bytes): The query response.\n        "
  },
  "*IDN?": {
    "verbose_cmd": "identification_query",
    "type": "query",
    "args": null,
    "doc": "*IDM?: Identification Query\n\n        The intent of the Identification query is for the unique\n        identification of devices over the system interface.\n\n        Return:\n            ret (bytes): The query response.\n        "
  },
  "*IST?": {
    "verbose_cmd": "individual_status_query",
    "type": "query",
    "args": null,
    "doc": "*IST?: Individual Status Query\n\n        The Individual Status query allows the programmer to read the\n        current state of the IEEE 488.1 defined \"ist\" local message in\n        the device.\n\n        Return:\n            ret (bytes): The query response.\n        "
  },
  "*LMC?": {
    "verbose_cmd": "learn_macro_query",
    "type": "query",
    "args": null,
    "doc": "*LMC?: Learn Macro Query\n\n        This query returns the currently defined macro labels.\n\n        Return:\n            ret (bytes): The query response.\n        "
  },
  "*LRN?": {
    "verbose_cmd": "learn_device_setup_query",
    "type": "query",
    "args": null,
    "doc": "*LRN?: Learn Device Setup Query\n\n        The Learn Device Setup query allows the programmer to obtain a\n        sequence of <RESPONSE MESSAGE UNIT> elements that may later be\n        used as <PROGRAM MESSAGE UNIT> elements to place the device in\n        the state it was in when the *LRN? common query was made.\n\n        Return:\n            ret (bytes): The query response.\n        "
  },
  "*OPC": {
    "verbose_cmd": "operation_complete",
    "type": "command",
    "args": null,
    "doc": "*OPC: Operation Complete Command\n\n        The Operation Complete command causes the device to generate\n        the operation complete message in the Standard Event Status\n        Register when all pending selected device operations have been\n        finished.\n\n        Return:\n            None\n        "
  },
  "*OPC?": {
    "verbose_cmd": "operation_complete_query",
    "type": "query",
    "args": null,
    "doc": "*OPC?: Operation Complete Query\n\n        The Operation Complete query places an ASCII character \"1\" into\n        the device's Output Queue when all pending selected device\n        operations have been finished.\n\n        Return:\n            ret (bytes): The query response.\n        "
  },
  "*OPT?": {
    "verbose_cmd": "option_identification_query",
    "type": "query",
    "args": null,
    "doc": "*OPT?: Option Identification Query\n\n        The Option Identification query is for identifying reportable\n        device options over the system interface.\n\n        Return:\n            ret (bytes): The query response.\n        "
  },
  "*PCB": {
    "verbose_cmd": "pass_control_back",
    "type": "command",
    "args": null,
    "doc": "*PCB: Pass Control Back\n\n        The Pass Control Back command is used by a controller to tell a\n        device, being a potential controller, to which address the\n        control is to be passed back when the device (acting as a\n        controller) sends the IEEE 488.1 interface message, take control\n        (TCT).\n\n        Return:\n            None\n        "
  },
  "*PMC": {
    "verbose_cmd": "purge_macros",
    "type": "command",
    "args": null,
    "doc": "*PMC: Purge Macros Command\n\n        The Purge Macros command causes the device to delete all macros\n        that may have been previously defined using the *DMC command.\n        All stored macro command sequences and labels shall be removed\n        from the device's memory by this command.\n\n        Return:\n            None\n        "
  },
  "*PRE": {
    "verbose_cmd": "parallel_poll_enable_register",
    "type": "command",
    "args": null,
    "doc": "*PRE: Parallel Poll Enable Register Command\n\n        The Parallel Poll Enable Register command sets the Parallel Poll\n        Enable Register bits.\n\n        Return:\n            None\n        "
  },
  "*PRE?": {
    "verbose_cmd": "parallel_poll_enable_register_query",
    "type": "query",
    "args": null,
    "doc": "*PRE?: Parallel Poll Enable Register Query\n\n        The Parallel Poll Enable Register query allows the programmer to\n        determine the current contents of the Parallel Poll Enable\n        Register.\n\n        Return:\n            ret (bytes): The query response.\n        "
  },
  "*PSC?": {
    "verbose_cmd": "power_on_status_clear_query",
    "type": "query",
    "args": null,
    "doc": "*PSC?: Power-On Status Clear Query\n\n        The Power-On Status Clear query allows the programmer to query\n        the device's power-on-status-clear flag. A returned value of\n        zero indicates that the Standard Event Status Enable Register,\n        Service Request Enable Register, and the Parallel Poll Enable\n        Register will retain their status when power is restored to the\n        device. A returned value of one indicates that the registers\n        listed above will be cleared when power is restored to the\n        device.\n\n        Return:\n            ret (bytes): The query response.\n        "
  },
  "*PUD": {
    "verbose_cmd": "protected_user_data",
    "type": "command",
    "args": null,
    "doc": "*PUD: Protected User Data Command\n\n        The Protected User Data command stores data unique to the device\n        such as calibration date, usage time, environmental conditions,\n        and inventory control numbers. A minimum of 63 bytes shall be\n        provided. The size of this area shall be specified in the device\n        documentation.\n\n        Return:\n            None\n        "
  },
  "*PUD?": {
    "verbose_cmd": "protected_user_data_query",
    "type": "query",
    "args": null,
    "doc": "*PUD?: Protected User Data Query\n\n        The Protected User Data query allows the programmer to retrieve\n        the contents of the *PUD storage area. See *PUD command.\n\n        Return:\n            ret (bytes): The query response.\n        "
  },
  "*RCL": {
    "verbose_cmd": "recall",
    "type": "command",
    "args": null,
    "doc": "*RCL: Recall Command\n\n        The *RCL command restores the current settings of a device from\n        a copy stored in local memory. The scope of the *RCL command is\n        the same as *RST and the *LRN? response. Device documentation\n        shall explicitely mention the device settings that are restored\n        by *RCL.\n\n        Return:\n            None\n        "
  },
  "*RDT": {
    "verbose_cmd": "resource_description_transfer",
    "type": "command",
    "args": null,
    "doc": "*RDT: Resource Description Transfer\n\n        The Resource Description Transfer command allows a Resource\n        Description to be stored in a device.\n\n        Return:\n            None\n        "
  },
  "*RDT?": {
    "verbose_cmd": "resource_description_transfer_query",
    "type": "query",
    "args": null,
    "doc": "*RDT?: Resource Description Transfer Query\n\n        The Resource Description Transfer query allows a Resource\n        Description to be retrieved from a device. The Resource\n        Description may be memory or in a read-write memory settable\n        by the *RDT command.\n\n        Return:\n            ret (bytes): The query response.\n        "
  },
  "*RMC": {
    "verbose_cmd": "remove_individual_macro",
    "type": "command",
    "args": null,
    "doc": "*RMC: Remove Individual Macro Command\n\n        The Remove Individual Macro command removes a single macro\n        definition from the device.\n\n        Return:\n            None\n        "
  },
  "*RST": {
    "verbose_cmd": "reset",
    "type": "command",
    "args": null,
    "doc": "*RST: Reset Command\n\n        Notes:\n            - This command shell do the following:\n                1. Except as explicitly exclude below, set the\n                   device-specific functions to a known state that is\n                   independent of the past-use history of the device.\n                   Device-specific commands may be provided to program\n                   a different reset state than the original\n                   factory-supplied one.\n                2. Set the macro defined by *DDT to a device-defined\n                   state.\n                3. Disable macros.\n                4. Force the device into the OCIS state.\n                5. Force the device into the OQIS state.\n\n            - This command explicitly shall NOT affect the following:\n                1. The state of the IEEE 488.1 interface.\n                2. The selected IEEE 488.1 address of the device.\n                3. The Output Queue.\n                4. Any Event Enable Register setting, including the\n                   Standard Event Status Enable Register settings.\n                5. Any Event Register setting, including the Standard\n                   Event Status Register settings.\n                6. The power-on-status-clear flag setting.\n                7. Macros defined with the Define Macro Contents command.\n                8. Calibration data that affects device specifications.\n                9. The Protected User Data query response.\n                10. The Resource Description Transfer query response.\n                11. The Service Request Enable Register setting.\n                12. The Parallel Poll Enable Register setting.\n                13. The memory register(s) associated with *SAV.\n\n        Return:\n            None\n        "
  },
  "*SAV": {
    "verbose_cmd": "save",
    "type": "command",
    "args": null,
    "doc": "*SAV: Save Command\n\n        The *SAV command stores the current settings of the device in\n        local*memory. The scope of the *SAV command is the same as *RST\n        and the *LRN? response. Device documentation shall explicitly\n        mention the device settings that are restored by *RCL.\n\n        Return:\n            None\n        "
  },
  "*SDS": {
    "verbose_cmd": "save_default_device_settings",
    "type": "command",
    "args": null,
    "doc": "*SDS: Save Default Device Settings Command\n\n        The Save Default Device Settings command initializes the\n        contents of a save/recall register. The register contents are\n        set to a known state that is independent of the past use history\n        of the device.\n\n        Return:\n            None\n        "
  },
  "*SRE": {
    "verbose_cmd": "service_request_enable",
    "type": "command",
    "args": null,
    "doc": "*SRE: Service Request Enable Command\n\n        The Service Request Enable command sets the Service Request\n        Enable Register bits.\n\n        Args:\n            bit (int): The Service Request Enable Register bits.\n\n        Return:\n            None\n        "
  },
  "*SRE?": {
    "verbose_cmd": "service_request_enable_query",
    "type": "query",
    "args": null,
    "doc": "*SRE?: Service Request Enable Query\n\n        The Service Request Enable query allows the programmer to\n        determine the current contents of the Service Request Enable\n        Register.\n\n        Return:\n            ret (bytes): The query response.\n        "
  },
  "*STB?": {
    "verbose_cmd": "read_status_byte_query",
    "type": "query",
    "args": null,
    "doc": "*STB?: Read Status Byte Query\n\n        The Read Status Byte query allows the programmer to read the\n        status byte and Master Summary Status bit.\n\n        Return:\n            ret (bytes): The query response.\n        "
  },
  "*TRG?": {
    "verbose_cmd": "trigger",
    "type": "query",
    "args": null,
    "doc": "*TRG: Trigger Command\n\n        The Trigger command is the device-specific analog of the\n        IEEE 488.1 defined Group Execute Trigger (GET) interface\n        message, and has exactly the same effect as a GET when\n        received, parsed, and executed by the device.\n\n        Return:\n            None\n        "
  },
  "*TST?": {
    "verbose_cmd": "self_test_query",
    "type": "query",
    "args": null,
    "doc": "*TST?: Self-Test Query\n\n        The self-test query causes an internal self-test and places a\n        response into the Output Queue indicating whether or not the\n        device completed the self-test without any detected errors.\n        Optionally, information on why the self-test was not completed\n        may be contained in the response.\n\n        Return:\n            ret (bytes): The query response.\n        "
  },
  "*WAI": {
    "verbose_cmd": "wait_to_continue",
    "type": "command",
    "args": null,
    "doc": "*WAI: Wait-to-Continue Command\n\n        The Wait-to-Continue command shall prevent the device from\n        executing any further commands or queries until the\n        no-operation-pending flag is TRUE.\n\n        Return:\n            None\n        "
  }
}